......................................................................................................
........................................OPERACIONES BÁSICAS...........................................
......................................................................................................

ruby puts(2+2); end              #->  4
ruby puts(2 - 2); end            #->  0
ruby puts(2*2); end              #->  4
ruby puts(2/2); end              #->  1
ruby puts(2 % 2); end            #->  0
ruby puts(2 ** 2); end           #->  4
ruby puts(2>2); end              #->  false
ruby puts(2>=2); end             #->  true
ruby puts(4<=2); end             #->  false 
ruby puts(4==4); end             #->  true
ruby puts(4!=4); end             #->  false
ruby puts(true and true); end    #->  true
ruby puts(true && false); end    #->  false
ruby puts(true or false); end    #->  true
ruby puts(false || false);end    #->  false
ruby puts(not (2>5)); end        #->  true
ruby puts(! true); end           #->  false
ruby puts(1..5); end             #->  (1 2 3 4 5)
ruby puts(1...5); end            #->  (1 2 3 4)
ruby puts((1..5) .. 6); end      #->  Error
ruby puts((1..5) step 2); end    #->  (1 3 5)
ruby puts((-1..-5) step -2); end #->  (-1 -3 -5)
ruby puts((1..-5) step 2); end   #->  Step: bad step
ruby puts((1..5) step -1); end   #->  Step: bad step
ruby puts (1+(2+(3+4))); end     #->  10
ruby puts ((1+2)+(3+4)); end     #->  10
ruby puts ((1+(2+3))+4); end     #->  10
ruby puts ("hola"+" mundo"); end	 #-> hola mundo
ruby puts (["hola"]+["mundo"]); end      #-> ("hola" "mundo")
ruby puts ("hola"+2); end                #-> Error
ruby puts (2+"hola"); end                #-> Error
ruby puts ("hola"*2); end                #-> holahola
ruby puts ([1,2]*2); end                 #-> (1 2 1 2)

......................................................................................................
.......................................EXPRESION DECLARE-EXP..........................................
......................................................................................................

ruby declare a; a = 3; puts (a/" mundo"); end 
# Error

ruby declare a,b,c; a = 5; b = 6; c = 10; puts a,b,c; end     
# 5							      
# 6
# 10
# => nil							      

ruby declare a,b,c; b = 6; c = 10; puts a,b,c; end
# nil
# 6
# 10
# => nil

ruby declare a,b,c; b = 6; c = 10; puts a,b,d; end
# Error: undefined local variable or method d

ruby puts d; declare d; end
# Error: undefined local variable or method d

......................................................................................................
.........................................EXPRESION SIMPLE.............................................
......................................................................................................

ruby declare a; a = 5; puts a; a += 1; puts a; end
# 5
# 6
# => nil

ruby def print (val) puts val; end print("hola mundo"); end
# hola mundo
# => nil

ruby def add1(val) val += 1; return val; end add1(100); end
# 101

ruby declare a; a = [[1,2],3]; puts (a[0][0]); end
# 1
# => nil

ruby declare a; a = [1,2,3,4,5,6,7]; puts (a[0,4]); puts (a[-1,-4]); end
# (1 2 3 4 5)
#  Error

ruby declare a; a = [[1,[[1,[100,[101,102,[0]]],3,4],2,3,3],3,4],2,3,4,5,6,7,8,9,10]; puts(a[0][1][0][1][1][2][0]); end
# 0
# => nil

......................................................................................................
.......................................EXPRESION FUNCTION-EXP.........................................
......................................................................................................

ruby def fact(n) if (n == 0) then return 1; else puts "el valor de n es ",n; return (n*(fact((n - 1)))); end end puts "el factorial de 5 es", (fact(5)); end
# el valor de n es
# 5
# el valor de n es
# 4
# el valor de n es
# 3
# el valor de n es
# 2
# el valor de n es
# 1
# el factorial de 5 es
# 120
# => nil

ruby def fibo(n) if (n<=2) then return 1; else declare left,right; left = (n - 1); right = (n - 2); return ((fibo(left))+(fibo(right))); end end puts (fibo(10)); end
# 55
# => nil

ruby def to_text(num) declare text; text = ["cero","uno","dos","tres","cuatro","cinco","seis","siete","ocho","nueve"]; return (text[num]); end to_text(5); end
# "cinco"

ruby def hola() return "mundo"; end end
# hola

ruby def hola() return "mundo"; end puts hola; end
	 #0=#(struct:closure ()
           #(struct:a-batch #(struct:return-exp
           #(struct:op-value #(struct:simple-val
           #(struct:str-val "mundo")))) ())
           #(struct:extended-env-record (hola)
           #(#0#) #(struct:empty-env-record)))
           => nil

......................................................................................................
.......................................EXPRESION IF-EXP...............................................
......................................................................................................

ruby declare x; x = 3; if (x>5) then puts x; elsif (x<3) then puts "mundo"; else puts "hola"; else puts "otro else"; end end
Resultado: #si x = 3
           hola
           => nil
           #si x = 2
           mundo
           => nil
           #si x = 6
           6
           => nil

......................................................................................................
.......................................EXPRESION UNLESS...............................................
......................................................................................................

ruby unless false then puts 4; end end
Resultado: 4
           => nil

ruby unless true then puts 4; else puts "hola mundo"; end end
Resultado: hola mundo
           => nil

ruby unless true then puts 4; else puts "hola mundo"; else puts "otro else"; end end
Resultado: hola mundo
           => nil

......................................................................................................
..............................EXPRESION WHILE-EXP UNTIL-EXP...........................................
......................................................................................................

ruby declare x; x = 0; while (x<10) do puts x; x += 1; end end
Resultado: 0
           1
           2
           3
           4
           5
           6
           7
           8
           9
           => nil

ruby declare x; x = 0; until (x>=10) do puts x; x += 1; end end
Resultado: 0
           1
           2
           3
           4
           5
           6
           7
           8
           9
           => nil

......................................................................................................
..............................EXPRESION WHILE-EXP UNTIL-EXP...........................................
......................................................................................................

ruby for x in (1..6) do puts x; end end
Resultado: 1
           2
           3
           4
           5
           6
           => nil

ruby for x in (1...6) do puts x; end end
Resultado: 1
           2
           3
           4
           5
           => nil

ruby for x in ((1..10) step 2) do puts x; end end
Resultado: 1
           3
           5
           7
           9
           => nil

ruby for x in [1,2,3] do puts x; end end
Resultado: 1
           2
           3
           => nil

ruby declare a; a = [1,2,3]; for x in a do puts x; end end
Resultado: 1
           2
           3
           => nil


......................................................................................................
...............................................OBJETOS................................................
......................................................................................................

ruby
    class Vector2D
        attr :x, :y;
        def initialize(x,y)
            @x = x; @y = y;
        end
        def x() 
            @x;
        end
        def x=(x)
            @x = x;
        end
        def y()
            @y;
        end
        def y=(y)
            @y = y;
        end 
    end
    declare z;
    z = Vector2D.New(2,3);
    z.x();
end
Resultado: 2